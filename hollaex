 #!/bin/bash 

SCRIPTPATH="$HOME/.hollaex-cli"

#### hollaex-cli Settings ####

RUN_WITH_VERIFY=true 

LOCAL_DEPLOYMENT_MODE='all'

GENERATE_PASSWORDS=

DOCKER_COMPOSE_NAME_PREFIX='local'

err_msg() { echo "$@" ;} >&2
err_msg_a() { err_msg "-a option argument required" ;}
err_msg_l() { err_msg "--long option argument required" ;}

function print_usage() {
/bin/cat << EOF

Usage : 
    hollaex [ init ] [ start ] [ stop ] [ upgrade ] [ terminate ] (--flags)
Options:
    init :
        --name, Name of your exchange.
        --path, Path to create init directory for hollaex-cli, Default is current directory.
    start :
        --settings, Path of hollaex-cli Settings file or directory, It reads settings values automatically from current directory by default.
        --deployment_mode, Specify exact container to start on this machine, Such as api.
        --with_backends, Running containers only without creating backend components, such as Redis.
        --database_init, Run sequelize db:migrate, db:seed and db triggers after init steps.
        --no_verify, Run script without verifying docker-compose setup.
    stop :
        --settings, Path of hollaex-cli Settings file or directory, It reads settings values automatically from current directory by default.
        --mode, Specify exact container to stop on this machine, Such as api.
        --database_init, Run sequelize db:migrate, db:seed and db triggers after init steps.
        --skip_generate_passwords, Skip generated random value passwords.
        --no_verify, Run script without verifying connected kubernetes cluster.
    upgrade :
        --settings, Path of hollaex-cli Settings file or directory, It reads settings values automatically from current directory by default.
        --database_init, Run sequelize db:migrate, db:seed and db triggers after init steps.
        --generate_passwords, Generate new random value passwords for replacing existing ones.
        --no_verify, Run script without verifying connected kubernetes cluster.
    terminate :
        --settings, Path of hollaex-cli Settings file or directory, It reads settings values automatically from current directory by default.
        --no_verify, Run script without verifying connected kubernetes cluster.
    
    General Flags : 
    --kube, Run the command for Kubernetes cluster. If you want to deploy or operate exchange on Kubernetes, use this flag.
    --version, Print out current installed version of hollaex-cli.

EOF
}

if [[ "$1" == 'dev' ]]; then

    while true; do
        [[ $# -eq 0 ]] && break
        case $1 in
            --path)
                shift 
                case $1 in (-*|"") err_msg_l; print_usage; exit 1; esac
                HOLLAEX_CODEBASE_PATH=$1
                echo "Hollaex-server codebase : $HOLLAEX_CODEBASE_PATH."
                shift; continue
                ;;
            --command)
                shift 
                case $1 in (-*|"") err_msg_l; print_usage; exit 1; esac
                LOCAL_COMMAND=$1
                echo "Your docker-compose command : $LOCAL_COMMAND."
                shift; continue
                ;;
            --database_init)
                LOCAL_DATABASE_INIT=true
                echo 'Local database initialization enabled.'
                shift; continue
                ;;
            --test)
                LOCAL_CODE_TEST=true
                echo 'Local mocha code test mode enabled.'
                shift; continue
                ;;
            --no_verify)
                RUN_WITH_VERIFY=false
                echo 'Running it wihtout verify the config.'
                shift; continue
                ;;
            --*) 
                err_msg "Invalid option: $1"
                print_usage;
                exit 1;
                ;;
        esac
        shift
    done

    if [[ "$HOLLAEX_CODEBASE_PATH" ]]; then

        CONFIG_FILE_PATH=$HOLLAEX_CODEBASE_PATH/tools/hollaex-cli-settings/*
        TEMPLATE_GENERATE_PATH=$HOLLAEX_CODEBASE_PATH/tools/hollaex-cli-templates
        INIT_PATH_CHECK=$HOLLAEX_CODEBASE_PATH/.hollaex
        DOCKER_COMPOSE_NAME_PREFIX=$(basename "$HOLLAEX_CODEBASE_PATH")

    elif [[ ! "$HOLLAEX_CODEBASE_PATH" ]]; then

        CONFIG_FILE_PATH=$(pwd)/tools/hollaex-cli-settings/*
        TEMPLATE_GENERATE_PATH=$(pwd)/tools/hollaex-cli-templates
        INIT_PATH_CHECK=$(pwd)/.hollaex
        HOLLAEX_CODEBASE_PATH=$(pwd)
        DOCKER_COMPOSE_NAME_PREFIX=$(basename "$HOLLAEX_CODEBASE_PATH")

    fi

    echo $HOLLAEX_CODEBASE_PATH

    #Quit if necessary flags are missing
    if [[ ! "$CONFIG_FILE_PATH" ]] || [[ ! -f "$INIT_PATH_CHECK" ]]; then

        echo "*** Failed to detect hollaex-cli initialized directory! Please re-check your path. ***"
        print_usage;
        exit 1;

    fi

    for i in ${CONFIG_FILE_PATH[@]}; do
        source $i
    done;
    
    source $SCRIPTPATH/tools_generator.sh
    load_config_variables;

    if [[ ! "$USE_KUBERNETES" ]]; then

        # Checking docker-compose is installed on this machine.
        if command docker-compose version > /dev/null 2>&1; then

            echo "*** docker-compose detected ***"
            echo "version: $(docker-compose version)"

        else

            echo "*** hollaex-cli failed to detect docker-compose installed on this machine. Please install it before running hollaex-cli. ***"
            exit 1;

        fi

        if [[ ! -d "$TEMPLATE_GENERATE_PATH/local" ]]; then
            mkdir $TEMPLATE_GENERATE_PATH/local;
        fi

        if [[ ! -d "$TEMPLATE_GENERATE_PATH/local/nginx" ]]; then
            mkdir $TEMPLATE_GENERATE_PATH/local/nginx;
        fi

        if [[ ! -d "$TEMPLATE_GENERATE_PATH/local/nginx/conf.d" ]]; then
            mkdir $TEMPLATE_GENERATE_PATH/local/nginx/conf.d;
        fi
    

        #Quit if necessary flags are missing
        if [[ ! "$LOCAL_COMMAND" ]]; then

            echo "*** Make sure to specify --command flag for dev commands ***"
            print_usage;
            exit 1;

        fi

        if [[ "$RUN_WITH_VERIFY" == true ]]; then

            echo "*** Are you sure you want to run $ENVIRONMENT_EXCHANGE_NAME - $LOCAL_COMMAND on your local machine? (y/n) ***"

            read answer

            if [[ "$answer" = "${answer#[Yy]}" ]] ;then
                echo "*** Exiting... ***"
                exit 0;
            fi

        fi

        if [[ "$GENERATE_PASSWORDS" == true ]]; then

            #Generating random values for passwords and update config file to contain it;
            update_random_values_to_config;
            for i in ${CONFIG_FILE_PATH[@]}; do
                source $i
            done;
            load_config_variables;

        fi

        if [[ "$ENVIRONMENT_DOCKER_COMPOSE_GENERATE_ENV_ENABLE" == true ]]; then

            generate_local_env;

        fi

        if [[ "$ENVIRONMENT_DOCKER_COMPOSE_GENERATE_YAML_ENABLE" == true ]]; then

            # if [[ -f "$HOLLAEX_CODEBASE_PATH/.${ENVIRONMENT_EXCHANGE_NAME}-docker-compose.yaml" ]]; then
            #     rm $HOLLAEX_CODEBASE_PATH/.${ENVIRONMENT_EXCHANGE_NAME}-docker-compose.yaml
            #     #ln -s $TEMPLATE_GENERATE_PATH/local/${ENVIRONMENT_EXCHANGE_NAME}-docker-compose.yaml $HOLLAEX_CODEBASE_PATH/.${ENVIRONMENT_EXCHANGE_NAME}-docker-compose.yaml
            # fi

            generate_local_docker_compose_for_dev;
        fi

        generate_nginx_upstream $LOCAL_DEPLOYMENT_MODE;

        if [[ "$ENVIRONMENT_CUSTOM_PLUGINS_AUTOCONFIGURE_ENABLE" == "true" ]]; then
        
            generate_nginx_config_for_plugin;

        elif [[ "$ENVIRONMENT_CUSTOM_PLUGINS_AUTOCONFIGURE_ENABLE" == "false" ]]; then

            rm -f $TEMPLATE_GENERATE_PATH/local/nginx/conf.d/plugins.conf

        fi

        docker-compose -f $HOLLAEX_CODEBASE_PATH/.${ENVIRONMENT_EXCHANGE_NAME}-docker-compose.yaml $LOCAL_COMMAND

        # Running database jobs for local db.
        if [[ "$LOCAL_DATABASE_INIT" == true ]]; then

            if [[ "$RUN_WITH_VERIFY" == true ]]; then

                echo "*** Are you sure you want to run database init jobs for your local $ENVIRONMENT_EXCHANGE_NAME db? (y/n) ***"

                read answer

                if [[ "$answer" = "${answer#[Yy]}" ]]; then
                    echo "*** Exiting... ***"
                    exit 0;
                fi

            fi

            local_database_init start;

        fi

        exit 0;

    fi


elif [[ "$1" == "init" ]]; then
    
    while true; do
        [[ $# -eq 0 ]] && break
        case $1 in
            --name)
                shift 
                case $1 in (-*|"") err_msg_l; print_usage; exit 1; esac
                ENVIRONMENT_EXCHANGE_NAME=$1
                echo "Name of your Exchange : $ENVIRONMENT_EXCHANGE_NAME."
                shift; continue
                ;;
        esac
        shift
    done

    #Quit if name of exchange is missing
    if [[ ! "$ENVIRONMENT_EXCHANGE_NAME" ]]; then

        echo "*** You must specify the name of your Exchange! Use `--name` flag to pass name. ***"
        print_usage;
        exit 1;

    fi

    HOLLAEX_CLI_INIT_PATH=$(pwd)/$ENVIRONMENT_EXCHANGE_NAME

    if [[ -d "$HOLLAEX_CLI_INIT_PATH" ]]; then

        echo "*** Init path exists! hollaex-cli can't override exsiting exchange files. ***"
        exit 1;
    fi

    echo "*** Initializing new Exchange - $ENVIRONMENT_EXCHANGE_NAME on $HOLLAEX_CLI_INIT_PATH ... ***"

    mkdir $HOLLAEX_CLI_INIT_PATH

    cp -r $SCRIPTPATH/settings $HOLLAEX_CLI_INIT_PATH/settings
    cp -r $SCRIPTPATH/plugin $HOLLAEX_CLI_INIT_PATH/plugin
    cp -r $SCRIPTPATH/templates $HOLLAEX_CLI_INIT_PATH/templates
    touch $HOLLAEX_CLI_INIT_PATH/.hollaex

    grep -v ENVIRONMENT_EXCHANGE_NAME $HOLLAEX_CLI_INIT_PATH/settings/configmap > temp.init && mv temp.init $HOLLAEX_CLI_INIT_PATH/settings/configmap

    (echo "ENVIRONMENT_EXCHANGE_NAME=$ENVIRONMENT_EXCHANGE_NAME" && cat $HOLLAEX_CLI_INIT_PATH/settings/configmap) > temp.init && mv temp.init $HOLLAEX_CLI_INIT_PATH/settings/configmap

    echo "*** All done! ***"
    echo "*** To run hollaex-cli commands further, Please get into initialized path first to let hollaex-cli reads settings. ***"

    exit 0;
    
elif [[ "$1" == "start" ]]; then

    while true; do
        [[ $# -eq 0 ]] && break
        case $1 in
            --settings)
                shift 
                case $1 in (-*|"") err_msg_l; print_usage; exit 1; esac
                if [[ -d "$1" ]] ; then
                    CONFIG_FILE_PATH=$1/*
                elif [[ -f "$1" ]]; then
                    CONFIG_FILE_PATH=$1
                fi
                echo "Your configuration file : $CONFIG_FILE_PATH."
                shift; continue
                ;;
            --mode)
                shift 
                case $1 in (-*|"") err_msg_l; print_usage; exit 1; esac
                LOCAL_DEPLOYMENT_MODE=$1
                echo "Your DEPLOYMENT MODE setup : $LOCAL_DEPLOYMENT_MODE."
                shift; continue
                ;;
            --with_backends)
                WITH_BACKENDS=true
                echo "Creating backend components. Running backend components such as PostgreSQL or Redis together on this machine."
                shift; continue
                ;;
            --generate_passwords)
                GENERATE_PASSWORDS=true
                echo "Enable generating random password values. Make sure that you already removed existing values on config file."
                shift; continue
                ;;
            --database_init)
                LOCAL_DATABASE_INIT=true
                echo "Local database initialization enabled."
                shift; continue
                ;;
            --kube)
                USE_KUBERNETES=true
                echo "hollaex-cli will use your Kubernetes cluster as a target."
                shift; continue
                ;;
            --no_verify)
                RUN_WITH_VERIFY=false
                echo "Running it wihtout verify the config."
                shift; continue
                ;;
            --*) 
                err_msg "Invalid option: $1"
                print_usage;
                exit 1;
                ;;
        esac
        shift
    done

    if [[ ! "$CONFIG_FILE_PATH" ]]; then
        CONFIG_FILE_PATH=$(pwd)/settings/*
        TEMPLATE_GENERATE_PATH=$(pwd)/templates
        INIT_PATH_CHECK=$(pwd)/.hollaex
    fi

    #Quit if necessary flags are missing
    if [[ ! "$CONFIG_FILE_PATH" ]] || [[ ! -f "$INIT_PATH_CHECK" ]]; then

        echo "*** Failed to detect hollaex-cli initialized directory! Please re-check your path. ***"
        print_usage;
        exit 1;

    fi

    for i in ${CONFIG_FILE_PATH[@]}; do
        source $i
    done;
    
    source $SCRIPTPATH/tools_generator.sh
    load_config_variables;


    if [[ "$USE_KUBERNETES" ]]; then

        #Checking Kubernetes dependencies
        check_kubernetes_dependencies;

        #Creating kubernetes_config directory for generating config for Kubernetes.
        if [[ ! -d "$TEMPLATE_GENERATE_PATH/kubernetes/config" ]]; then
            mkdir $TEMPLATE_GENERATE_PATH/kubernetes/config;
        fi

        if [[ ! "$ENVIRONMENT_DOCKER_IMAGE_VERSION"  ]] || [[ ! "$ENVIRONMENT_EXCHANGE_NAME"  ]] ; then
            echo "Error : Please define exchange name and Docker image version on config file before running hollaex-cli."
            print_usage
            exit 1;
        fi
        

        echo "*** Verifying current KUBECONFIG on the machine ***"
        kubectl get nodes

        if [[ "$RUN_WITH_VERIFY" == true ]]; then

            if [[ "$DATABASE_INIT" == true ]]; then

                echo "*** Are you sure you want to initialize $ENVIRONMENT_EXCHANGE_NAME v$ENVIRONMENT_DOCKER_IMAGE_VERSION ($KUBERNETES_CONFIGMAP_API_HOST) with automatic database initalization on this cluster? (y/n) ***"

            else 

                echo "*** Are you sure you want to initialize / start $ENVIRONMENT_EXCHANGE_NAME v$ENVIRONMENT_DOCKER_IMAGE_VERSION ($KUBERNETES_CONFIGMAP_API_HOST) on this cluster? (y/n) ***"

            fi

            read answer

            if [[ "$answer" = "${answer#[Yy]}" ]] ;then
                echo "*** Exiting... ***"
                exit 0;
            fi

        fi
        

        if [[ "$GENERATE_PASSWORDS" == true ]]; then

            #Generating random values for passwords and update config file to contain it;
            update_random_values_to_config;
            for i in ${CONFIG_FILE_PATH[@]}; do
                source $i
            done;
            load_config_variables;

        fi

        # For scaling up exisitng Exchange on Kubernetes
        if command kubectl get ns $ENVIRONMENT_EXCHANGE_NAME > /dev/null 2>&1; then

            echo "*** Existing Exchange - $ENVIRONMENT_EXCHANGE_NAME detected ***"

            if [[ "$RUN_WITH_VERIFY" == true ]]; then
                echo "*** Would you like to recover (scale up) existing Exchange on this Kubernetes? (y/n) ***"

                read answer

                if [[ "$answer" = "${answer#[Yy]}" ]] ;then
                    echo "*** Exiting... ***"
                    exit 0;
                fi
            fi

            echo "*** Scaling up containers on the cluster... ***"
            kubectl scale deployment/$ENVIRONMENT_EXCHANGE_NAME-server-api --replicas=$ENVIRONMENT_KUBERNETES_API_SERVER_REPLICAS --namespace $ENVIRONMENT_EXCHANGE_NAME

            kubectl scale deployment/$ENVIRONMENT_EXCHANGE_NAME-server-ws --replicas=1 --namespace $ENVIRONMENT_EXCHANGE_NAME

            helm_dynamic_trading_paris scaleup;

            kubectl scale deployment/$ENVIRONMENT_EXCHANGE_NAME-redis --replicas=1 --namespace $ENVIRONMENT_EXCHANGE_NAME

            kubectl scale deployment/$ENVIRONMENT_EXCHANGE_NAME-db --replicas=1 --namespace $ENVIRONMENT_EXCHANGE_NAME

            kubectl scale deployment/$ENVIRONMENT_EXCHANGE_NAME-influxdb --replicas=1 --namespace $ENVIRONMENT_EXCHANGE_NAME
            
            echo "*** All done! ***"
            echo "*** Containers successfully scaled up ***"

            exit 0;

        fi


        if [[ "$ENVIRONMENT_KUBERNETES_GENERATE_CONFIGMAP_ENABLE" == true ]]; then

            echo "Generating Kubernetes Configmap"
            generate_kubernetes_configmap;

        fi

        if [[ "$ENVIRONMENT_KUBERNETES_GENERATE_SECRET_ENABLE" == true ]]; then

            echo "Generating Kubernetes Secret"
            generate_kubernetes_secret;

        fi


        if [[ "$ENVIRONMENT_KUBERNETES_GENERATE_INGRESS_ENABLE" == true ]]; then

            echo "Generating Kubernetes Ingress"
            generate_kubernetes_ingress;

        fi

        if [[ "$ENVIRONMENT_CUSTOM_PLUGINS_AUTOCONFIGURE_ENABLE" == true ]]; then

            echo "Generating Kubernetes Ingress for custom plugins"
            generate_nginx_config_for_plugin;

        fi
        

        echo "*** Creating namespace on Kubernetes ***"
        kubectl create ns $ENVIRONMENT_EXCHANGE_NAME

        echo "*** Applying configmap on the namespace ***"
        kubectl apply -f $TEMPLATE_GENERATE_PATH/kubernetes/config/$ENVIRONMENT_EXCHANGE_NAME-configmap.yaml

        echo "*** Applying secret on the namespace ***"
        kubectl apply -f $TEMPLATE_GENERATE_PATH/kubernetes/config/$ENVIRONMENT_EXCHANGE_NAME-secret.yaml

        if [[ "$ENVIRONMENT_KUBERNETES_USE_EXTERNAL_REDIS" == false ]]; then

            generate_nodeselector_values $ENVIRONMENT_KUBERNETES_REDIS_NODESELECTOR redis

            echo "*** Running Redis ***"
            
            if [[ "$ENVIRONMENT_KUBERNETES_ALLOW_EXTERNAL_REDIS_ACCESS" == true ]]; then

                helm upgrade --install $ENVIRONMENT_EXCHANGE_NAME-redis  --namespace $ENVIRONMENT_EXCHANGE_NAME --set NodePort.enable="true" --set NodePort.port="$ENVIRONMENT_KUBERNETES_EXTERNAL_REDIS_ACCESS_PORT" --set setAuth.secretName="$ENVIRONMENT_EXCHANGE_NAME-secret" $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-redis
        
            else

                helm upgrade --install $ENVIRONMENT_EXCHANGE_NAME-redis  --namespace $ENVIRONMENT_EXCHANGE_NAME --set setAuth.secretName="$ENVIRONMENT_EXCHANGE_NAME-secret" $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-redis
            fi

        fi

        if [[ "$ENVIRONMENT_KUBERNETES_USE_EXTERNAL_POSTGRESQL" == false ]]; then

            generate_nodeselector_values $ENVIRONMENT_KUBERNETES_POSTGRESQL_NODESELECTOR postgresql
            echo "*** Running PostgreSQL DB ***"

            if [[ "$ENVIRONMENT_KUBERNETES_ALLOW_EXTERNAL_POSTGRESQL_ACCESS" == true ]]; then

                helm upgrade --install $ENVIRONMENT_EXCHANGE_NAME-db --namespace $ENVIRONMENT_EXCHANGE_NAME --set pvc.create=true --set pvc.name="$ENVIRONMENT_EXCHANGE_NAME-postgres-volume" --set secretName="$ENVIRONMENT_EXCHANGE_NAME-secret" --set NodePort.enable="true" --set NodePort.port="$ENVIRONMENT_KUBERNETES_EXTERNAL_POSTGRESQL_ACCESS_PORT" -f $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-postgres/values.yaml -f $TEMPLATE_GENERATE_PATH/kubernetes/config/nodeSelector-postgresql.yaml $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-postgres

            else

                helm upgrade --install $ENVIRONMENT_EXCHANGE_NAME-db --namespace $ENVIRONMENT_EXCHANGE_NAME --set pvc.create=true --set pvc.name="$ENVIRONMENT_EXCHANGE_NAME-postgres-volume" --set secretName="$ENVIRONMENT_EXCHANGE_NAME-secret" -f $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-postgres/values.yaml -f $TEMPLATE_GENERATE_PATH/kubernetes/config/nodeSelector-postgresql.yaml $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-postgres

            fi

        fi

        if [[ "$ENVIRONMENT_KUBERNETES_USE_EXTERNAL_INFLUXDB" == false ]]; then

            if [[ "$ENVIRONMENT_KUBERNETES_INFLUXDB_NODESELECTOR" ]]; then

                generate_nodeselector_values $ENVIRONMENT_KUBERNETES_INFLUXDB_NODESELECTOR influxdb

            fi

            echo "*** Running InfluxDB ***"
            helm upgrade --install $ENVIRONMENT_EXCHANGE_NAME-influxdb --namespace $ENVIRONMENT_EXCHANGE_NAME --set setCustomUser.enabled="true" --set setCustomUser.secretName="$ENVIRONMENT_EXCHANGE_NAME-secret"  -f $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-influxdb/values.yaml -f $TEMPLATE_GENERATE_PATH/kubernetes/config/nodeSelector-influxdb.yaml $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-influxdb

        fi

        echo "*** Applying ingress on the namespace ***"
        kubectl apply -f $TEMPLATE_GENERATE_PATH/kubernetes/config/$ENVIRONMENT_EXCHANGE_NAME-ingress.yaml

        if [[ ! "$ENVIRONMENT_KUBERNETES_DOCKER_HUB_USERNAME" ]] || [[ ! "$ENVIRONMENT_KUBERNETES_DOCKER_HUB_PASSWORD" ]] || [[ ! "$ENVIRONMENT_KUBERNETES_DOCKER_HUB_EMAIL" ]]; then

            echo "*** One of your docker registry credentials are missing! ***"

            echo "Docker registry username :"
            read username
                
            ENVIRONMENT_KUBERNETES_DOCKER_HUB_USERNAME=$username


            echo "Docker registry password :"
            read password

            ENVIRONMENT_KUBERNETES_DOCKER_HUB_PASSWORD=$password

            echo "Docker registry email :"
            read email

            ENVIRONMENT_KUBERNETES_DOCKER_HUB_EMAIL=$email

            echo "*** Your docker registry credentials ***"
            echo "USERNAME - $ENVIRONMENT_KUBERNETES_DOCKER_HUB_USERNAME"
            echo "PASSWORD - $ENVIRONMENT_KUBERNETES_DOCKER_HUB_PASSWORD" 
            echo "EMAIL - $ENVIRONMENT_KUBERNETES_DOCKER_HUB_EMAIL"
            echo "** Are you sure you want to proceed with this credentials? (y/n) ***"

            read answer

            if [[ "$answer" = "${answer#[Yy]}" ]] ;then
                echo "*** Exiting... ***"
                exit 0;
            fi

        fi

        echo "*** Creating Docker registry secret on $ENVIRONMENT_EXCHANGE_NAME namespace ***"
        kubectl create secret docker-registry bitholla-registry-secret --namespace $ENVIRONMENT_EXCHANGE_NAME --docker-server=docker.io --docker-username=$ENVIRONMENT_KUBERNETES_DOCKER_HUB_USERNAME --docker-password=$ENVIRONMENT_KUBERNETES_DOCKER_HUB_PASSWORD --docker-email=$ENVIRONMENT_KUBERNETES_DOCKER_HUB_EMAIL

        # FOR GENERATING NODESELECTOR VALUES
        generate_nodeselector_values $ENVIRONMENT_KUBERNETES_EXCHANGE_NODESELECTOR hollaex

        echo "*** Running HollaEx server containers ***"

        helm upgrade --install $ENVIRONMENT_EXCHANGE_NAME-server-api --namespace $ENVIRONMENT_EXCHANGE_NAME --recreate-pods --set DEPLOYMENT_MODE="api" --set dockerTag="$ENVIRONMENT_DOCKER_IMAGE_VERSION" --set stable.replicaCount="$ENVIRONMENT_KUBERNETES_API_SERVER_REPLICAS" --set autoScaling.hpa.enable="false" --set envName="$ENVIRONMENT_EXCHANGE_NAME-env" --set secretName="$ENVIRONMENT_EXCHANGE_NAME-secret" -f $TEMPLATE_GENERATE_PATH/kubernetes/config/nodeSelector-hollaex.yaml -f $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-server/values.yaml $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-server

        helm upgrade --install $ENVIRONMENT_EXCHANGE_NAME-server-ws --namespace $ENVIRONMENT_EXCHANGE_NAME --recreate-pods --set DEPLOYMENT_MODE="ws" --set dockerTag="$ENVIRONMENT_DOCKER_IMAGE_VERSION" --set envName="$ENVIRONMENT_EXCHANGE_NAME-env" --set secretName="$ENVIRONMENT_EXCHANGE_NAME-secret" -f $TEMPLATE_GENERATE_PATH/kubernetes/config/nodeSelector-hollaex.yaml -f $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-server/values.yaml $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-server

        helm_dynamic_trading_paris run;

        sleep 5;

        echo "Waiting for 60 seconds to Pods get ready to run database jobs..."
        sleep 60;

        echo "*** Running sequelize db:migrate ***"
        kubectl exec --namespace $ENVIRONMENT_EXCHANGE_NAME $(kubectl get pod --namespace $ENVIRONMENT_EXCHANGE_NAME -l "app=$ENVIRONMENT_EXCHANGE_NAME-server-api" -o name | sed 's/pod\///' | head -n 1) -- sequelize db:migrate 

        echo "*** Running Database Triggers ***"
        kubectl exec --namespace $ENVIRONMENT_EXCHANGE_NAME $(kubectl get pod --namespace $ENVIRONMENT_EXCHANGE_NAME -l "app=$ENVIRONMENT_EXCHANGE_NAME-server-api" -o name | sed 's/pod\///' | head -n 1) -- node tools/dbs/runTriggers.js

        echo "*** Running sequelize db:seed:all ***"
        kubectl exec --namespace $ENVIRONMENT_EXCHANGE_NAME $(kubectl get pod --namespace $ENVIRONMENT_EXCHANGE_NAME -l "app=$ENVIRONMENT_EXCHANGE_NAME-server-api" -o name | sed 's/pod\///' | head -n 1) -- sequelize db:seed:all 

        echo "*** Running InfluxDB migrations ***"
        kubectl exec --namespace $ENVIRONMENT_EXCHANGE_NAME $(kubectl get pod --namespace $ENVIRONMENT_EXCHANGE_NAME -l "app=$ENVIRONMENT_EXCHANGE_NAME-server-api" -o name | sed 's/pod\///' | head -n 1) -- node tools/dbs/createInflux.js
        kubectl exec --namespace $ENVIRONMENT_EXCHANGE_NAME $(kubectl get pod --namespace $ENVIRONMENT_EXCHANGE_NAME -l "app=$ENVIRONMENT_EXCHANGE_NAME-server-api" -o name | sed 's/pod\///' | head -n 1) -- node tools/dbs/migrateInflux.js
        kubectl exec --namespace $ENVIRONMENT_EXCHANGE_NAME $(kubectl get pod --namespace $ENVIRONMENT_EXCHANGE_NAME -l "app=$ENVIRONMENT_EXCHANGE_NAME-server-api" -o name | sed 's/pod\///' | head -n 1) -- node tools/dbs/initializeInflux.js

        
        echo "*** All done! ***"
        echo "*** Your $ENVIRONMENT_EXCHANGE_NAME ($KUBERNETES_CONFIGMAP_API_HOST) will be available in few minutes. If there's an issue, please review logs and try it again. ***"

        exit 0;

    fi

    if [[ ! "$USE_KUBERNETES" ]]; then

        # Checking docker-compose is installed on this machine.
        if command docker-compose version > /dev/null 2>&1; then

            echo "*** docker-compose detected ***"
            echo "version: $(docker-compose version)"

        else

            echo "*** hollaex-cli failed to detect docker-compose installed on this machine. Please install it before running hollaex-cli. ***"
            exit 1;

        fi

        if [[ ! -d "$TEMPLATE_GENERATE_PATH/local" ]]; then
            mkdir $TEMPLATE_GENERATE_PATH/local;
        fi

        if [[ ! -d "$TEMPLATE_GENERATE_PATH/local/nginx" ]]; then
            mkdir $TEMPLATE_GENERATE_PATH/local/nginx;
        fi

        if [[ ! -d "$TEMPLATE_GENERATE_PATH/local/nginx/conf.d" ]]; then
            mkdir $TEMPLATE_GENERATE_PATH/local/nginx/conf.d;
        fi
        
        LOCAL_COMMAND="up -d"

        #Quit if necessary flags are missing
        if [[ ! "$LOCAL_COMMAND" ]]; then

            echo "*** Some necessary flags are missing! Please check agian your command. ***"
            print_usage;
            exit 1;

        fi

        if [[ "$RUN_WITH_VERIFY" == true ]]; then

            echo "*** Are you sure you want to run $ENVIRONMENT_EXCHANGE_NAME on your local machine? (y/n) ***"

            read answer

            if [[ "$answer" = "${answer#[Yy]}" ]] ;then
                echo "*** Exiting... ***"
                exit 0;
            fi

        fi

        if [[ "$GENERATE_PASSWORDS" == true ]]; then

            #Generating random values for passwords and update config file to contain it;
            update_random_values_to_config;
            for i in ${CONFIG_FILE_PATH[@]}; do
                source $i
            done;
            load_config_variables;

        fi

        if [[ "$ENVIRONMENT_DOCKER_COMPOSE_GENERATE_ENV_ENABLE" == true ]]; then

            generate_local_env;

        fi

        if [[ "$ENVIRONMENT_DOCKER_COMPOSE_GENERATE_YAML_ENABLE" == true ]]; then

            generate_local_docker_compose $LOCAL_DEPLOYMENT_MODE;

        fi

        generate_nginx_upstream $LOCAL_DEPLOYMENT_MODE;

        if [[ "$ENVIRONMENT_CUSTOM_PLUGINS_AUTOCONFIGURE_ENABLE" == "true" ]]; then
        
            generate_nginx_config_for_plugin;

        elif [[ "$ENVIRONMENT_CUSTOM_PLUGINS_AUTOCONFIGURE_ENABLE" == "false" ]]; then

            rm -f $TEMPLATE_GENERATE_PATH/local/nginx/conf.d/plugins.conf

        fi

        docker-compose -f $TEMPLATE_GENERATE_PATH/local/$ENVIRONMENT_EXCHANGE_NAME-docker-compose.yaml $LOCAL_COMMAND

        # Running database jobs for local db.
        if [[ "$LOCAL_DATABASE_INIT" == true ]]; then

            if [[ "$RUN_WITH_VERIFY" == true ]]; then

                echo "*** Are you sure you want to run database init jobs for your local $ENVIRONMENT_EXCHANGE_NAME db? (y/n) ***"

                read answer

                if [[ "$answer" = "${answer#[Yy]}" ]]; then
                    echo "*** Exiting... ***"
                    exit 0;
                fi

            fi

            local_database_init start;

        fi

        exit 0;

    fi

elif [[ "$1" == "stop" ]]; then

    while true; do
        [[ $# -eq 0 ]] && break
        case $1 in
            --settings)
                shift 
                case $1 in (-*|"") err_msg_l; print_usage; exit 1; esac
                if [[ -d "$1" ]] ; then
                    CONFIG_FILE_PATH=$1/*
                elif [[ -f "$1" ]]; then
                    CONFIG_FILE_PATH=$1
                fi
                echo "Your configuration file : $CONFIG_FILE_PATH."
                shift; continue
                ;;
            --mode)
                shift 
                case $1 in (-*|"") err_msg_l; print_usage; exit 1; esac
                LOCAL_DEPLOYMENT_MODE=$1
                echo "Your DEPLOYMENT_MODE setup : $LOCAL_DEPLOYMENT_MODE."
                shift; continue
                ;;
            --with_backends)
                WITH_BACKENDS=true
                echo "Creating backend components such as Database or Redis together with exchange containers on this machine."
                shift; continue
                ;;
            --kube)
                USE_KUBERNETES=true
                echo "hollaex-cli will use your Kubernetes cluster as a target."
                shift; continue
                ;;
            --no_verify)
                RUN_WITH_VERIFY=false
                echo "Running it wihtout verify the config."
                shift; continue
                ;;
            --*) 
                err_msg "Invalid option: $1"
                print_usage;
                exit 1;
                ;;
        esac
        shift
    done

    if [[ ! "$CONFIG_FILE_PATH" ]]; then
        CONFIG_FILE_PATH=$(pwd)/settings/*
        TEMPLATE_GENERATE_PATH=$(pwd)/templates
        INIT_PATH_CHECK=$(pwd)/.hollaex
    fi

    #Quit if necessary flags are missing
    if [[ ! "$CONFIG_FILE_PATH" ]] || [[ ! -f "$INIT_PATH_CHECK" ]]; then

        echo "*** Failed to detect hollaex-cli initialized directory! Please re-check your path. ***"
        print_usage;
        exit 1;

    fi

    for i in ${CONFIG_FILE_PATH[@]}; do
        source $i
    done;
    
    source $SCRIPTPATH/tools_generator.sh
    load_config_variables;

    if [[ "$USE_KUBERNETES" ]]; then

         #Checking Kubernetes dependencies
        check_kubernetes_dependencies;

        echo "*** Verifying current KUBECONFIG on the machine ***"
        kubectl get nodes

        if [[ "$RUN_WITH_VERIFY" == true ]]; then

            echo "*** Are you sure you want to stop (scale down) $ENVIRONMENT_EXCHANGE_NAME on this cluster? (y/n) ***"

            read answer

            if [[ "$answer" = "${answer#[Yy]}" ]] ;then
                echo "*** Exiting... ***"
                exit 0;
            fi

        fi

        echo "*** Removing $ENVIRONMENT_EXCHANGE_NAME ingress rule on the cluster. ***"
        kubectl delete -f $TEMPLATE_GENERATE_PATH/kubernetes/config/$ENVIRONMENT_EXCHANGE_NAME-ingress.yaml

        echo "*** Scaling down containers on the cluster... ***"
        kubectl scale deployment/$ENVIRONMENT_EXCHANGE_NAME-server-api --replicas=0 --namespace $ENVIRONMENT_EXCHANGE_NAME

        kubectl scale deployment/$ENVIRONMENT_EXCHANGE_NAME-server-ws --replicas=0 --namespace $ENVIRONMENT_EXCHANGE_NAME

        helm_dynamic_trading_paris scaledown;

        if [[ "$WITH_BACKENDS" ]]; then

            echo "*** Scaling down backend components... ***"

            kubectl scale deployment/$ENVIRONMENT_EXCHANGE_NAME-redis --replicas=0 --namespace $ENVIRONMENT_EXCHANGE_NAME

            kubectl scale deployment/$ENVIRONMENT_EXCHANGE_NAME-db --replicas=0 --namespace $ENVIRONMENT_EXCHANGE_NAME

            kubectl scale deployment/$ENVIRONMENT_EXCHANGE_NAME-influxdb --replicas=0 --namespace $ENVIRONMENT_EXCHANGE_NAME

        fi

        echo "*** All done! ***"
        echo "*** Containers successfully scaled down ***"

    fi

    if [[ ! "$USE_KUBERNETES" ]]; then

        # Checking docker-compose is installed on this machine.
        if command docker-compose version > /dev/null 2>&1; then

            echo "*** docker-compose detected ***"
            echo "version: $(docker-compose version)"

        else

            echo "*** hollaex-cli failed to detect docker-compose installed on this machine. Please install it before running hollaex-cli. ***"
            exit 1;

        fi

        LOCAL_COMMAND="stop"

        #Quit if necessary flags are missing
        if [[ ! "$LOCAL_COMMAND" ]]; then

            echo "*** Some necessary flags are missing! Please check agian your command. ***"
            print_usage;
            exit 1;

        fi

        if [[ "$RUN_WITH_VERIFY" == true ]]; then

            echo "*** Are you sure you want to stop $ENVIRONMENT_EXCHANGE_NAME - $LOCAL_DEPLOYMENT_MODE which running on your local? (y/n) ***"

            read answer

            if [[ "$answer" = "${answer#[Yy]}" ]] ;then
                echo "*** Exiting... ***"
                exit 0;
            fi

        fi

        if [[ "$GENERATE_PASSWORDS" == true ]]; then

            #Generating random values for passwords and update config file to contain it;
            update_random_values_to_config;
            for i in ${CONFIG_FILE_PATH[@]}; do
                source $i
            done;
            load_config_variables;

        fi

        docker-compose -f $TEMPLATE_GENERATE_PATH/local/$ENVIRONMENT_EXCHANGE_NAME-docker-compose.yaml $LOCAL_COMMAND

        exit 0;

    fi

elif [[ "$1" == "upgrade" ]]; then


    while true; do
        [[ $# -eq 0 ]] && break
        case $1 in
            --settings)
                shift 
                case $1 in (-*|"") err_msg_l; print_usage; exit 1; esac
                if [[ -d "$1" ]] ; then
                    CONFIG_FILE_PATH=$1/*
                elif [[ -f "$1" ]]; then
                    CONFIG_FILE_PATH=$1
                fi
                echo "Your configuration file : $CONFIG_FILE_PATH."
                shift; continue
                ;;
            --mode)
                shift 
                case $1 in (-*|"") err_msg_l; print_usage; exit 1; esac
                LOCAL_DEPLOYMENT_MODE=$1
                echo "Your DEPLOYMENT_MODE setup : $LOCAL_DEPLOYMENT_MODE."
                shift; continue
                ;;
            --generate_passwords)
                GENERATE_PASSWORDS=true
                echo "Enable generating random password values. Make sure that you already backup existing values on settings file."
                shift; continue
                ;;
             --with_backends)
                WITH_BACKENDS=true
                echo "Upgrade backend components such as Database or Redis together with exchange containers on this machine."
                shift; continue
                ;;
            --database_init)
                DATABASE_INIT=true
                echo "Database re-initialization enabled."
                shift; continue
                ;;
            --kube)
                USE_KUBERNETES=true
                echo "hollaex-cli will use your Kubernetes cluster as a target."
                shift; continue
                ;;
            # --upgrade_backends)
            #     UPGRADE_BACKEND_COMPONENTS=true
            #     echo "Backend components upgrade enabled."
            #     shift; continue
            #     ;;
            --no_verify)
                RUN_WITH_VERIFY=false
                echo "Running it wihtout verify the config."
                shift; continue
                ;;
            --*) 
                err_msg "Invalid option: $1"
                print_usage;
                exit 1;
                ;;
        esac
        shift
    done

    if [[ ! "$CONFIG_FILE_PATH" ]]; then
        CONFIG_FILE_PATH=$(pwd)/settings/*
        TEMPLATE_GENERATE_PATH=$(pwd)/templates
        INIT_PATH_CHECK=$(pwd)/.hollaex
    fi

    #Quit if necessary flags are missing
    if [[ ! "$CONFIG_FILE_PATH" ]] || [[ ! -f "$INIT_PATH_CHECK" ]]; then

        echo "*** Failed to detect hollaex-cli initialized directory! Please re-check your path. ***"
        print_usage;
        exit 1;

    fi

    for i in ${CONFIG_FILE_PATH[@]}; do
        source $i
    done;
    
    source $SCRIPTPATH/tools_generator.sh
    load_config_variables;

    if [[ "$USE_KUBERNETES" ]]; then

        #Checking Kubernetes dependencies
        check_kubernetes_dependencies;

        #Creating kubernetes_config directory for generating config for Kubernetes.
        if [[ ! -d "$TEMPLATE_GENERATE_PATH/kubernetes/config" ]]; then
            mkdir $TEMPLATE_GENERATE_PATH/kubernetes/config;
        fi

        if [[ ! "$ENVIRONMENT_DOCKER_IMAGE_VERSION"  ]] || [[ ! "$ENVIRONMENT_EXCHANGE_NAME"  ]] ; then
            echo "Error : Please define exchange name and Docker image version on config file before running hollaex-cli."
            print_usage
            exit 1;
        fi

        echo "*** Verifying current KUBECONFIG on the machine ***"
        kubectl get nodes

        if [[ "$RUN_WITH_VERIFY" == true ]]; then

            if [[ "$STAGING_VERSION" ]] && [[ ! "$ENVIRONMENT_DOCKER_IMAGE_VERSION" ]]; then

                echo "*** Are you sure you want to enable / upgrade $ENVIRONMENT_EXCHANGE_NAME-server-api staging v$STAGING_VERSION with $STAGING_REPLICACOUNT containers on this cluster? (y/n) ***"

            elif [[ "$STAGING_VERSION" ]] && [[ "$ENVIRONMENT_DOCKER_IMAGE_VERSION" ]]; then

                echo "*** Are you sure you want to upgrade $ENVIRONMENT_EXCHANGE_NAME to v$ENVIRONMENT_DOCKER_IMAGE_VERSION with $ENVIRONMENT_KUBERNETES_API_SERVER_REPLICAS api containers, and enable / upgrade $ENVIRONMENT_EXCHANGE_NAME-server-api staging to v$STAGING_VERSION with $STAGING_REPLICACOUNT containers on this cluster? (y/n) ***"

            else
                
                echo "*** Are you sure you want to upgrade $ENVIRONMENT_EXCHANGE_NAME v$ENVIRONMENT_DOCKER_IMAGE_VERSION with $ENVIRONMENT_KUBERNETES_API_SERVER_REPLICAS api containers on this cluster? (y/n) ***"

            fi

            read answer

            if [[ "$answer" = "${answer#[Yy]}" ]] ;then
                echo "*** Exiting... ***"
                exit 0;
            fi

        fi

        if [[ "$GENERATE_PASSWORDS" == true ]]; then

            #Generating random values for passwords and update config file to contain it;
            update_random_values_to_config;
            for i in ${CONFIG_FILE_PATH[@]}; do
                source $i
            done;
            load_config_variables;
            
        fi

        if [[ "$ENVIRONMENT_KUBERNETES_GENERATE_CONFIGMAP_ENABLE" == true ]]; then

            echo "Generating Kubernetes Configmap"
            generate_kubernetes_configmap;

        fi

        if [[ "$ENVIRONMENT_KUBERNETES_GENERATE_SECRET_ENABLE" == true ]]; then

            echo "Generating Kubernetes Configmap"
            generate_kubernetes_secret;

        fi

        if [[ "$ENVIRONMENT_KUBERNETES_GENERATE_INGRESS_ENABLE" == true ]]; then

            echo "Generating Kubernetes Configmap"
            generate_kubernetes_ingress;

        fi

        if [[ "$ENVIRONMENT_CUSTOM_PLUGINS_AUTOCONFIGURE_ENABLE" == true ]]; then

            echo "Generating Kubernetes Ingress for custom plugins"
            generate_nginx_config_for_plugin;

        fi

        echo "*** Removing $ENVIRONMENT_EXCHANGE_NAME ingress rule on the cluster. ***"
        kubectl delete -f $TEMPLATE_GENERATE_PATH/kubernetes/config/$ENVIRONMENT_EXCHANGE_NAME-ingress.yaml

        echo "*** Applying latest configmap env on the cluster. ***"
        kubectl apply -f $TEMPLATE_GENERATE_PATH/kubernetes/config/$ENVIRONMENT_EXCHANGE_NAME-configmap.yaml

        echo "*** Applying latest secret on the cluster ***"
        kubectl apply -f $TEMPLATE_GENERATE_PATH/kubernetes/config/$ENVIRONMENT_EXCHANGE_NAME-secret.yaml

        if [[ "$WITH_BACKENDS" == true ]]; then

            echo "*** Upgrading Redis ***"
            generate_nodeselector_values $ENVIRONMENT_KUBERNETES_REDIS_NODESELECTOR redis

            if [[ "$ENVIRONMENT_KUBERNETES_ALLOW_EXTERNAL_REDIS_ACCESS" == true ]]; then

                helm upgrade --install --recreate-pods $ENVIRONMENT_EXCHANGE_NAME-redis  --namespace $ENVIRONMENT_EXCHANGE_NAME --set NodePort.enable="true" --set NodePort.port="$ENVIRONMENT_KUBERNETES_EXTERNAL_REDIS_ACCESS_PORT"  --set setAuth.secretName="$ENVIRONMENT_EXCHANGE_NAME-secret" $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-redis
        
            else

                helm upgrade --install --recreate-pods $ENVIRONMENT_EXCHANGE_NAME-redis  --namespace $ENVIRONMENT_EXCHANGE_NAME  --set setAuth.secretName="$ENVIRONMENT_EXCHANGE_NAME-secret" $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-redis
            fi

            echo "*** Running PostgreSQL DB ***"
            generate_nodeselector_values $ENVIRONMENT_KUBERNETES_POSTGRESQL_NODESELECTOR postgresql

            if [[ "$ENVIRONMENT_KUBERNETES_ALLOW_EXTERNAL_POSTGRESQL_ACCESS" == true ]]; then

                helm upgrade --install $ENVIRONMENT_EXCHANGE_NAME-db --namespace $ENVIRONMENT_EXCHANGE_NAME --set pvc.create=true --set pvc.name="$ENVIRONMENT_EXCHANGE_NAME-postgres-volume" --set secretName="$ENVIRONMENT_EXCHANGE_NAME-secret" --set NodePort.enable="true" --set NodePort.port="$ENVIRONMENT_KUBERNETES_EXTERNAL_POSTGRESQL_ACCESS_PORT" -f $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-postgres/values.yaml -f $TEMPLATE_GENERATE_PATH/kubernetes/config/nodeSelector-postgresql.yaml $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-postgres

            else

                helm upgrade --install $ENVIRONMENT_EXCHANGE_NAME-db --namespace $ENVIRONMENT_EXCHANGE_NAME --set pvc.create=true --set pvc.name="$ENVIRONMENT_EXCHANGE_NAME-postgres-volume" --set secretName="$ENVIRONMENT_EXCHANGE_NAME-secret" -f $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-postgres/values.yaml -f $TEMPLATE_GENERATE_PATH/kubernetes/config/nodeSelector-postgresql.yaml $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-postgres

            fi

            echo "*** Upgrading InfluxDB ***"
            helm upgrade --install --recreate-pods $ENVIRONMENT_EXCHANGE_NAME-influxdb --namespace $ENVIRONMENT_EXCHANGE_NAME --set persistence.size=$ENVIRONMENT_KUBERNETES_INFLUXDB_VOLUMESIZE --set setCustomUser.enabled="true" --set setCustomUser.secretName="$ENVIRONMENT_EXCHANGE_NAME-secret"  $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-influxdb
        
        fi

        # FOR GENERATING NODESELECTOR VALUES
        generate_nodeselector_values $ENVIRONMENT_KUBERNETES_EXCHANGE_NODESELECTOR hollaex

        echo "*** Upgrading $ENVIRONMENT_EXCHANGE_NAME Pods on Kubernetes. ***"
        helm upgrade --install $ENVIRONMENT_EXCHANGE_NAME-server-api --namespace $ENVIRONMENT_EXCHANGE_NAME --recreate-pods --set DEPLOYMENT_MODE="api" --set dockerTag="$ENVIRONMENT_DOCKER_IMAGE_VERSION" --set stable.replicaCount="2" --set autoScaling.hpa.enable="false" --set envName="$ENVIRONMENT_EXCHANGE_NAME-env" --set secretName="$ENVIRONMENT_EXCHANGE_NAME-secret" --set podRestart_webhook_url="$ENVIRONMENT_KUBERNETES_RESTART_NOTIFICATION_WEBHOOK_URL" -f $TEMPLATE_GENERATE_PATH/kubernetes/config/nodeSelector-hollaex.yaml -f $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-server/values.yaml $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-server

        helm upgrade --install $ENVIRONMENT_EXCHANGE_NAME-server-ws --namespace $ENVIRONMENT_EXCHANGE_NAME --recreate-pods --set DEPLOYMENT_MODE="ws" --set dockerTag="$ENVIRONMENT_DOCKER_IMAGE_VERSION" --set envName="$ENVIRONMENT_EXCHANGE_NAME-env" --set secretName="$ENVIRONMENT_EXCHANGE_NAME-secret" --set podRestart_webhook_url="$ENVIRONMENT_KUBERNETES_RESTART_NOTIFICATION_WEBHOOK_URL" -f $TEMPLATE_GENERATE_PATH/kubernetes/config/nodeSelector-hollaex.yaml -f $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-server/values.yaml $SCRIPTPATH/kubernetes/helm-chart/bitholla-hollaex-server

        helm_dynamic_trading_paris run;

        if [[ "$DATABASE_INIT" == true ]]; then

            echo "Waiting for 60 seconds to Pods get ready to run database jobs..."
            sleep 60;

            echo "*** Running sequelize db:migrate ***"
            kubectl exec --namespace $ENVIRONMENT_EXCHANGE_NAME $(kubectl get pod --namespace $ENVIRONMENT_EXCHANGE_NAME -l "app=$ENVIRONMENT_EXCHANGE_NAME-server-api" -o name | sed 's/pod\///' | head -n 1) -- sequelize db:migrate 

            echo "*** Running Database Triggers ***"
            kubectl exec --namespace $ENVIRONMENT_EXCHANGE_NAME $(kubectl get pod --namespace $ENVIRONMENT_EXCHANGE_NAME -l "app=$ENVIRONMENT_EXCHANGE_NAME-server-api" -o name | sed 's/pod\///' | head -n 1) -- node tools/dbs/runTriggers.js

            echo "*** Running InfluxDB migrations ***"
            kubectl exec --namespace $ENVIRONMENT_EXCHANGE_NAME $(kubectl get pod --namespace $ENVIRONMENT_EXCHANGE_NAME -l "app=$ENVIRONMENT_EXCHANGE_NAME-server-api" -o name | sed 's/pod\///' | head -n 1) -- node tools/dbs/initializeInflux.js
            
        fi

        echo "*** Applying $ENVIRONMENT_EXCHANGE_NAME ingress rule on the cluster. ***"
        kubectl apply -f $TEMPLATE_GENERATE_PATH/kubernetes/config/$ENVIRONMENT_EXCHANGE_NAME-ingress.yaml

        sleep 5;

        echo "*** All done! ***"
        echo "*** Your $ENVIRONMENT_EXCHANGE_NAME ($KUBERNETES_CONFIGMAP_API_HOST) will be available in few minutes. If there's an issue, please review logs and try it again. ***"

        exit 0;
    
    fi

    if [[ ! "$USE_KUBERNETES" ]]; then

        # Checking docker-compose is installed on this machine.
        if command docker-compose version > /dev/null 2>&1; then

            echo "*** docker-compose detected ***"
            echo "version: $(docker-compose version)"

        else

            echo "*** hollaex-cli failed to detect docker-compose installed on this machine. Please install it before running hollaex-cli. ***"
            exit 1;

        fi

        if [[ ! -d "$TEMPLATE_GENERATE_PATH/local" ]]; then
            mkdir $TEMPLATE_GENERATE_PATH/local;
        fi

        if [[ ! -d "$TEMPLATE_GENERATE_PATH/local/nginx" ]]; then
            mkdir $TEMPLATE_GENERATE_PATH/local/nginx;
        fi

        if [[ ! -d "$TEMPLATE_GENERATE_PATH/local/nginx/conf.d" ]]; then
            mkdir $TEMPLATE_GENERATE_PATH/local/nginx/conf.d;
        fi

        #if [[ ! -f "$TEMPLATE_GENERATE_PATH/local/logs/nginx/error.log" ]]; then
        #    touch $TEMPLATE_GENERATE_PATH/local/logs/nginx/error.log;
        #fi
        
        LOCAL_COMMAND="up -d"

        #Quit if necessary flags are missing
        if [[ ! "$LOCAL_COMMAND" ]]; then

            echo "*** Some necessary flags are missing! Please check agian your command. ***"
            print_usage;
            exit 1;

        fi

        if [[ "$RUN_WITH_VERIFY" == true ]]; then

            echo "*** Are you sure you want to run docker-compose $LOCAL_COMMAND for $ENVIRONMENT_EXCHANGE_NAME on your local? (y/n) ***"

            read answer

            if [[ "$answer" = "${answer#[Yy]}" ]] ;then
                echo "*** Exiting... ***"
                exit 0;
            fi

        fi

        if [[ "$GENERATE_PASSWORDS" == true ]]; then

            #Generating random values for passwords and update config file to contain it;
            update_random_values_to_config;
            for i in ${CONFIG_FILE_PATH[@]}; do
                source $i
            done;
            load_config_variables;

        fi

        if [[ "$ENVIRONMENT_DOCKER_COMPOSE_GENERATE_ENV_ENABLE" == true ]]; then

            generate_local_env;

        fi

        if [[ "$ENVIRONMENT_DOCKER_COMPOSE_GENERATE_YAML_ENABLE" == true ]]; then

            generate_local_docker_compose $LOCAL_DEPLOYMENT_MODE;

        fi

        generate_nginx_upstream $LOCAL_DEPLOYMENT_MODE;

        if [[ "$ENVIRONMENT_CUSTOM_PLUGINS_AUTOCONFIGURE_ENABLE" == "true" ]]; then

            generate_nginx_config_for_plugin;

        elif [[ "$ENVIRONMENT_CUSTOM_PLUGINS_AUTOCONFIGURE_ENABLE" == "false" ]]; then

            rm -f $TEMPLATE_GENERATE_PATH/local/nginx/conf.d/plugins.conf

        fi

        echo "*** Restarting containers to apply new changes... ***"
        docker-compose -f $TEMPLATE_GENERATE_PATH/local/$ENVIRONMENT_EXCHANGE_NAME-docker-compose.yaml stop
        docker-compose -f $TEMPLATE_GENERATE_PATH/local/$ENVIRONMENT_EXCHANGE_NAME-docker-compose.yaml $LOCAL_COMMAND

        # Running database jobs for local db.
        if [[ "$DATABASE_INIT" == true ]]; then

            if [[ "$RUN_WITH_VERIFY" == true ]]; then

                echo "*** Are you sure you want to run database init jobs for your local $ENVIRONMENT_EXCHANGE_NAME db? (y/n) ***"

                read answer

                if [[ "$answer" = "${answer#[Yy]}" ]]; then
                    echo "*** Exiting... ***"
                    exit 0;
                fi

            fi

            local_database_init upgrade;

        fi

        exit 0;

    fi

elif [[ "$1" == "terminate" ]]; then

    while true; do
        [[ $# -eq 0 ]] && break
        case $1 in
            --settings)
                shift 
                case $1 in (-*|"") err_msg_l; print_usage; exit 1; esac
                if [[ -d "$1" ]] ; then
                    CONFIG_FILE_PATH=$1/*
                elif [[ -f "$1" ]]; then
                    CONFIG_FILE_PATH=$1
                fi
                echo "Your configuration file : $CONFIG_FILE_PATH."
                shift; continue
                ;;
            # --mode)
            #     shift 
            #     case $1 in (-*|"") err_msg_l; print_usage; exit 1; esac
            #     LOCAL_DEPLOYMENT_MODE=$1
            #     echo "Your DEPLOYMENT_MODE setup : $LOCAL_DEPLOYMENT_MODE."
            #     shift; continue
            #     ;;
            --with_backends)
                WITH_BACKENDS=true
                echo "Creating backend components such as Database or Redis together with exchange containers on this machine."
                shift; continue
                ;;
            --kube)
                USE_KUBERNETES=true
                echo "hollaex-cli will use your Kubernetes cluster as a target."
                shift; continue
                ;;
            --no_verify)
                RUN_WITH_VERIFY=false
                echo "Running it wihtout verify the config."
                shift; continue
                ;;
            --*) 
                err_msg "Invalid option: $1"
                print_usage;
                exit 1;
                ;;
        esac
        shift
    done

    if [[ ! "$CONFIG_FILE_PATH" ]]; then
        CONFIG_FILE_PATH=$(pwd)/settings/*
        TEMPLATE_GENERATE_PATH=$(pwd)/templates
        INIT_PATH_CHECK=$(pwd)/.hollaex
    fi

    #Quit if necessary flags are missing
    if [[ ! "$CONFIG_FILE_PATH" ]] || [[ ! -f "$INIT_PATH_CHECK" ]]; then

        echo "*** Failed to detect hollaex-cli initialized directory! Please re-check your path. ***"
        print_usage;
        exit 1;

    fi

    for i in ${CONFIG_FILE_PATH[@]}; do
        source $i
    done;

    source $SCRIPTPATH/tools_generator.sh
    load_config_variables;

    if [[ "$USE_KUBERNETES" ]]; then

        #Checking Kubernetes dependencies
        check_kubernetes_dependencies;

        echo "*** Verifying current KUBECONFIG on the machine ***"
        kubectl get nodes

        if [[ "$RUN_WITH_VERIFY" == true ]]; then

            echo "*** Are you sure you want to terminate $ENVIRONMENT_EXCHANGE_NAME on this cluster? (y/n) ***"

            read answer

            if [[ "$answer" = "${answer#[Yy]}" ]] ;then
                echo "*** Exiting... ***"
                exit 0;
            fi

        fi

        echo "*** Removing $ENVIRONMENT_EXCHANGE_NAME ingress rule on the cluster. ***"
        kubectl delete -f $TEMPLATE_GENERATE_PATH/kubernetes/config/$ENVIRONMENT_EXCHANGE_NAME-ingress.yaml

        echo "*** Removing helm packages on the cluster. ***"
        helm del --purge $ENVIRONMENT_EXCHANGE_NAME-server-api
        helm del --purge $ENVIRONMENT_EXCHANGE_NAME-server-ws
        
        helm_dynamic_trading_paris terminate;

        helm del --purge $ENVIRONMENT_EXCHANGE_NAME-redis 
        helm del --purge $ENVIRONMENT_EXCHANGE_NAME-db
        helm del --purge $ENVIRONMENT_EXCHANGE_NAME-influxdb

        echo "*** Removing $ENVIRONMENT_EXCHANGE_NAME namespace. ***"
        kubectl delete ns $ENVIRONMENT_EXCHANGE_NAME

        echo "*** All done! ***"
        echo "*** $ENVIRONMENT_EXCHANGE_NAME ($KUBERNETES_CONFIGMAP_API_HOST) has been successfully removed. If there's an issue, please review logs and try it again. ***"

        exit 0;

    fi

    if [[ ! "$USE_KUBERNETES" ]]; then

        # Checking docker-compose is installed on this machine.
        if command docker-compose version > /dev/null 2>&1; then

            echo "*** docker-compose detected ***"
            echo "version: $(docker-compose version)"

        else

            echo "*** hollaex-cli failed to detect docker-compose installed on this machine. Please install it before running hollaex-cli. ***"
            exit 1;

        fi

        LOCAL_COMMAND="down --remove-orphans"

        #Quit if necessary flags are missing
        if [[ ! "$LOCAL_COMMAND" ]]; then

            echo "*** Some necessary flags are missing! Please check agian your command. ***"
            print_usage;
            exit 1;

        fi

        if [[ "$RUN_WITH_VERIFY" == true ]]; then

            echo "*** Are you sure you want to terminate $ENVIRONMENT_EXCHANGE_NAME - $LOCAL_DEPLOYMENT_MODE which running on your local? (y/n) ***"

            read answer

            if [[ "$answer" = "${answer#[Yy]}" ]] ;then
                echo "*** Exiting... ***"
                exit 0;
            fi

        fi

        docker-compose -f $TEMPLATE_GENERATE_PATH/local/$ENVIRONMENT_EXCHANGE_NAME-docker-compose.yaml $LOCAL_COMMAND
        exit 0;

    fi


elif [[ "$1" == "--version" ]]; then

    echo "hollaex-cli : v$(cat $SCRIPTPATH/version)"

else

    print_usage;

    exit 0;

fi


